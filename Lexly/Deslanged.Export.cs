//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.CodeDom;
using System.Reflection;


internal partial class Deslanged {
    private static CodeCompileUnit _CompileUnit(string[] referencedAssemblies, CodeNamespace[] namespaces, CodeAttributeDeclaration[] assemblyCustomAttributes, CodeDirective[] startDirectives, CodeDirective[] endDirectives) {
        CodeCompileUnit result = new CodeCompileUnit();
        result.ReferencedAssemblies.AddRange(referencedAssemblies);
        result.Namespaces.AddRange(namespaces);
        result.AssemblyCustomAttributes.AddRange(assemblyCustomAttributes);
        result.StartDirectives.AddRange(startDirectives);
        result.EndDirectives.AddRange(endDirectives);
        return result;
    }
    private static CodeNamespace _Namespace(string name, CodeNamespaceImport[] imports, CodeTypeDeclaration[] types, CodeCommentStatement[] comments) {
        CodeNamespace result = new CodeNamespace();
        result.Name = name;
        result.Imports.AddRange(imports);
        result.Types.AddRange(types);
        result.Comments.AddRange(comments);
        return result;
    }
    private static CodeTypeDeclaration _TypeDeclaration(
                string name, 
                bool isClass, 
                bool isEnum, 
                bool isInterface, 
                bool isStruct, 
                bool isPartial, 
                MemberAttributes attributes, 
                TypeAttributes typeAttributes, 
                CodeTypeParameter[] typeParameters, 
                CodeTypeReference[] baseTypes, 
                CodeTypeMember[] members, 
                CodeCommentStatement[] comments, 
                CodeAttributeDeclaration[] customAttributes, 
                CodeDirective[] startDirectives, 
                CodeDirective[] endDirectives, 
                CodeLinePragma linePragma) {
        CodeTypeDeclaration result = new CodeTypeDeclaration(name);
        result.IsClass = isClass;
        result.IsEnum = isEnum;
        result.IsInterface = isInterface;
        result.IsStruct = isStruct;
        result.IsPartial = isPartial;
        result.Attributes = attributes;
        result.TypeAttributes = typeAttributes;
        result.TypeParameters.AddRange(typeParameters);
        result.BaseTypes.AddRange(baseTypes);
        result.Members.AddRange(members);
        result.Comments.AddRange(comments);
        result.CustomAttributes.AddRange(customAttributes);
        result.StartDirectives.AddRange(startDirectives);
        result.EndDirectives.AddRange(endDirectives);
        result.LinePragma = linePragma;
        return result;
    }
    private static CodeMemberField _MemberField(CodeTypeReference type, string name, CodeExpression initExpression, MemberAttributes attributes, CodeCommentStatement[] comments, CodeAttributeDeclaration[] customAttributes, CodeDirective[] startDirectives, CodeDirective[] endDirectives, CodeLinePragma linePragma) {
        CodeMemberField result = new CodeMemberField(type, name);
        result.InitExpression = initExpression;
        result.Attributes = attributes;
        result.Comments.AddRange(comments);
        result.CustomAttributes.AddRange(customAttributes);
        result.StartDirectives.AddRange(startDirectives);
        result.EndDirectives.AddRange(endDirectives);
        result.LinePragma = linePragma;
        return result;
    }
    public static System.CodeDom.CodeCompileUnit Token = Deslanged._CompileUnit(new string[0], new CodeNamespace[] {
                Deslanged._Namespace("", new CodeNamespaceImport[0], new CodeTypeDeclaration[0], new CodeCommentStatement[0]),
                Deslanged._Namespace("Lexly", new CodeNamespaceImport[0], new CodeTypeDeclaration[] {
                            Deslanged._TypeDeclaration("Token", false, false, false, true, false, (MemberAttributes.Final | MemberAttributes. Private), TypeAttributes.NotPublic, new CodeTypeParameter[0], new CodeTypeReference[0], new CodeTypeMember[] {
                                        Deslanged._MemberField(new CodeTypeReference(typeof(int)), "Line", null, (MemberAttributes.Final | MemberAttributes. Public), new CodeCommentStatement[] {
                                                    new CodeCommentStatement(" <summary>", true),
                                                    new CodeCommentStatement(" Indicates the line where the token occurs", true),
                                                    new CodeCommentStatement(" </summary>", true)}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                        Deslanged._MemberField(new CodeTypeReference(typeof(int)), "Column", null, (MemberAttributes.Final | MemberAttributes. Public), new CodeCommentStatement[] {
                                                    new CodeCommentStatement(" <summary>", true),
                                                    new CodeCommentStatement(" Indicates the column where the token occurs", true),
                                                    new CodeCommentStatement(" </summary>", true)}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                        Deslanged._MemberField(new CodeTypeReference(typeof(long)), "Position", null, (MemberAttributes.Final | MemberAttributes. Public), new CodeCommentStatement[] {
                                                    new CodeCommentStatement(" <summary>", true),
                                                    new CodeCommentStatement(" Indicates the position where the token occurs", true),
                                                    new CodeCommentStatement(" </summary>", true)}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                        Deslanged._MemberField(new CodeTypeReference(typeof(int)), "SymbolId", null, (MemberAttributes.Final | MemberAttributes. Public), new CodeCommentStatement[] {
                                                    new CodeCommentStatement(" <summary>", true),
                                                    new CodeCommentStatement(" Indicates the symbol id or -1 for the error symbol", true),
                                                    new CodeCommentStatement(" </summary>", true)}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                        Deslanged._MemberField(new CodeTypeReference(typeof(string)), "Value", null, (MemberAttributes.Final | MemberAttributes. Public), new CodeCommentStatement[] {
                                                    new CodeCommentStatement(" <summary>", true),
                                                    new CodeCommentStatement(" Indicates the value of the token", true),
                                                    new CodeCommentStatement(" </summary>", true)}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                        Deslanged._MemberField(new CodeTypeReference(new CodeTypeReference("Token"), 1), "Skipped", null, (MemberAttributes.Final | MemberAttributes. Public), new CodeCommentStatement[] {
                                                    new CodeCommentStatement(" <summary>", true),
                                                    new CodeCommentStatement(" Always null in Lexly", true),
                                                    new CodeCommentStatement(" </summary>", true)}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null)}, new CodeCommentStatement[] {
                                        new CodeCommentStatement(" <summary>", true),
                                        new CodeCommentStatement(" Reference implementation for generated shared code", true),
                                        new CodeCommentStatement(" </summary>", true)}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null)}, new CodeCommentStatement[0])}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0]);
    private static CodeConstructor _Constructor(MemberAttributes attributes, CodeParameterDeclarationExpression[] parameters, CodeExpression[] chainedConstructorArgs, CodeExpression[] baseConstructorArgs, CodeStatement[] statements, CodeCommentStatement[] comments, CodeAttributeDeclaration[] customAttributes, CodeDirective[] startDirectives, CodeDirective[] endDirectives, CodeLinePragma linePragma) {
        CodeConstructor result = new CodeConstructor();
        result.Attributes = attributes;
        result.Parameters.AddRange(parameters);
        result.ChainedConstructorArgs.AddRange(chainedConstructorArgs);
        result.BaseConstructorArgs.AddRange(baseConstructorArgs);
        result.Statements.AddRange(statements);
        result.Comments.AddRange(comments);
        result.CustomAttributes.AddRange(customAttributes);
        result.StartDirectives.AddRange(startDirectives);
        result.EndDirectives.AddRange(endDirectives);
        result.LinePragma = linePragma;
        return result;
    }
    private static CodeMemberMethod _MemberMethod(CodeTypeReference returnType, string name, MemberAttributes attributes, CodeParameterDeclarationExpression[] parameters, CodeStatement[] statements, CodeTypeReference[] implementationTypes, CodeTypeReference privateImplementationType, CodeCommentStatement[] comments, CodeAttributeDeclaration[] customAttributes, CodeAttributeDeclaration[] returnTypeCustomAttributes, CodeDirective[] startDirectives, CodeDirective[] endDirectives, CodeLinePragma linePragma) {
        CodeMemberMethod result = new CodeMemberMethod();
        result.ReturnType = returnType;
        result.Name = name;
        result.Attributes = attributes;
        result.Parameters.AddRange(parameters);
        result.Statements.AddRange(statements);
        result.ImplementationTypes.AddRange(implementationTypes);
        result.PrivateImplementationType = privateImplementationType;
        result.Comments.AddRange(comments);
        result.CustomAttributes.AddRange(customAttributes);
        result.ReturnTypeCustomAttributes.AddRange(returnTypeCustomAttributes);
        result.StartDirectives.AddRange(startDirectives);
        result.EndDirectives.AddRange(endDirectives);
        result.LinePragma = linePragma;
        return result;
    }
    private static CodeMemberProperty _MemberProperty(CodeTypeReference type, string name, MemberAttributes attributes, CodeParameterDeclarationExpression[] parameters, CodeStatement[] getStatements, CodeStatement[] setStatements, CodeTypeReference[] implementationTypes, CodeTypeReference privateImplementationType, CodeCommentStatement[] comments, CodeAttributeDeclaration[] customAttributes, CodeDirective[] startDirectives, CodeDirective[] endDirectives, CodeLinePragma linePragma) {
        CodeMemberProperty result = new CodeMemberProperty();
        result.Type = type;
        result.Name = name;
        result.Attributes = attributes;
        result.Parameters.AddRange(parameters);
        result.GetStatements.AddRange(getStatements);
        result.SetStatements.AddRange(setStatements);
        result.ImplementationTypes.AddRange(implementationTypes);
        result.PrivateImplementationType = privateImplementationType;
        result.Comments.AddRange(comments);
        result.CustomAttributes.AddRange(customAttributes);
        result.StartDirectives.AddRange(startDirectives);
        result.EndDirectives.AddRange(endDirectives);
        result.LinePragma = linePragma;
        return result;
    }
    private static CodeParameterDeclarationExpression _ParameterDeclarationExpression(CodeTypeReference type, string name, FieldDirection direction, CodeAttributeDeclaration[] customAttributes) {
        CodeParameterDeclarationExpression result = new CodeParameterDeclarationExpression(type, name);
        result.Direction = direction;
        result.CustomAttributes.AddRange(customAttributes);
        return result;
    }
    public static System.CodeDom.CodeCompileUnit Tokenizer = Deslanged._CompileUnit(new string[0], new CodeNamespace[] {
                Deslanged._Namespace("", new CodeNamespaceImport[] {
                            new CodeNamespaceImport("System"),
                            new CodeNamespaceImport("System.Collections"),
                            new CodeNamespaceImport("System.Collections.Generic"),
                            new CodeNamespaceImport("System.IO"),
                            new CodeNamespaceImport("System.Text")}, new CodeTypeDeclaration[0], new CodeCommentStatement[0]),
                Deslanged._Namespace("Lexly", new CodeNamespaceImport[0], new CodeTypeDeclaration[] {
                            Deslanged._TypeDeclaration("Tokenizer", true, false, false, false, true, (MemberAttributes.Final | MemberAttributes. Private), TypeAttributes.NotPublic, new CodeTypeParameter[0], new CodeTypeReference[] {
                                        new CodeTypeReference(typeof(object)),
                                        new CodeTypeReference("IEnumerable`1", new CodeTypeReference[] {
                                                    new CodeTypeReference("Token")})}, new CodeTypeMember[] {
                                        Deslanged._MemberField(new CodeTypeReference(typeof(int)), "DefaultTabWidth", new CodePrimitiveExpression(4), (MemberAttributes.Const | MemberAttributes. Public), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                        Deslanged._MemberField(new CodeTypeReference(typeof(int)), "ErrorSymbol", new CodePrimitiveExpression(-1), (MemberAttributes.Const | MemberAttributes. Public), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                        Deslanged._MemberField(new CodeTypeReference(new CodeTypeReference(new CodeTypeReference(typeof(int)), 1), 1), "_program", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                        Deslanged._MemberField(new CodeTypeReference(new CodeTypeReference(typeof(string)), 1), "_blockEnds", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                        Deslanged._MemberField(new CodeTypeReference(new CodeTypeReference(typeof(int)), 1), "_nodeFlags", null, MemberAttributes.Private, new CodeCommentStatement[] {
                                                    new CodeCommentStatement(" our node flags. Currently only used for the hidden attribute")}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                        Deslanged._MemberField(new CodeTypeReference("IEnumerable`1", new CodeTypeReference[] {
                                                        new CodeTypeReference(typeof(char))}), "_input", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                        Deslanged._MemberField(new CodeTypeReference(typeof(int)), "_tabWidth", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                        Deslanged._MemberField(new CodeTypeReference(typeof(int)), "_line", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                        Deslanged._MemberField(new CodeTypeReference(typeof(int)), "_column", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                        Deslanged._MemberField(new CodeTypeReference(typeof(long)), "_position", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                        Deslanged._Constructor((MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[] {
                                                    new CodeParameterDeclarationExpression(new CodeTypeReference(new CodeTypeReference(new CodeTypeReference(typeof(int)), 1), 1), "program"),
                                                    new CodeParameterDeclarationExpression(new CodeTypeReference(new CodeTypeReference(typeof(string)), 1), "blockEnds"),
                                                    new CodeParameterDeclarationExpression(new CodeTypeReference(new CodeTypeReference(typeof(int)), 1), "nodeFlags"),
                                                    new CodeParameterDeclarationExpression(new CodeTypeReference("IEnumerable`1", new CodeTypeReference[] {
                                                                    new CodeTypeReference(typeof(char))}), "input")}, new CodeExpression[] {
                                                    new CodeArgumentReferenceExpression("program"),
                                                    new CodeArgumentReferenceExpression("blockEnds"),
                                                    new CodeArgumentReferenceExpression("nodeFlags"),
                                                    new CodeArgumentReferenceExpression("input"),
                                                    new CodePrimitiveExpression(1),
                                                    new CodePrimitiveExpression(0),
                                                    new CodePrimitiveExpression(0),
                                                    new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Lexly.Tokenizer")), "DefaultTabWidth")}, new CodeExpression[0], new CodeStatement[0], new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                        Deslanged._Constructor((MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[] {
                                                    new CodeParameterDeclarationExpression(new CodeTypeReference(new CodeTypeReference(new CodeTypeReference(typeof(int)), 1), 1), "program"),
                                                    new CodeParameterDeclarationExpression(new CodeTypeReference(new CodeTypeReference(typeof(string)), 1), "blockEnds"),
                                                    new CodeParameterDeclarationExpression(new CodeTypeReference(new CodeTypeReference(typeof(int)), 1), "nodeFlags"),
                                                    new CodeParameterDeclarationExpression(new CodeTypeReference("IEnumerable`1", new CodeTypeReference[] {
                                                                    new CodeTypeReference(typeof(char))}), "input"),
                                                    new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(int)), "line"),
                                                    new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(int)), "column"),
                                                    new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(long)), "position"),
                                                    new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(int)), "tabWidth")}, new CodeExpression[0], new CodeExpression[0], new CodeStatement[] {
                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_program"), new CodeArgumentReferenceExpression("program")),
                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_blockEnds"), new CodeArgumentReferenceExpression("blockEnds")),
                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_nodeFlags"), new CodeArgumentReferenceExpression("nodeFlags")),
                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_input"), new CodeArgumentReferenceExpression("input")),
                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_line"), new CodeArgumentReferenceExpression("line")),
                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_column"), new CodeArgumentReferenceExpression("column")),
                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_position"), new CodeArgumentReferenceExpression("position")),
                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_tabWidth"), new CodeArgumentReferenceExpression("tabWidth"))}, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                        Deslanged._MemberMethod(new CodeTypeReference("IEnumerator`1", new CodeTypeReference[] {
                                                        new CodeTypeReference("Token")}), "GetEnumerator", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                    new CodeMethodReturnStatement(new CodeObjectCreateExpression(new CodeTypeReference("TokenizerEnumerator"), new CodeExpression[] {
                                                                    new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_program"),
                                                                    new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_blockEnds"),
                                                                    new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_nodeFlags"),
                                                                    new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_input"), "GetEnumerator"), new CodeExpression[0]),
                                                                    new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_tabWidth"),
                                                                    new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_line"),
                                                                    new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_column"),
                                                                    new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_position")}))}, new CodeTypeReference[] {
                                                    new CodeTypeReference("IEnumerable`1", new CodeTypeReference[] {
                                                                new CodeTypeReference("Token")})}, null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                        Deslanged._MemberMethod(new CodeTypeReference("IEnumerator"), "GetEnumerator", ((MemberAttributes)(0)), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                    new CodeMethodReturnStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "GetEnumerator"), new CodeExpression[0]))}, new CodeTypeReference[0], new CodeTypeReference("IEnumerable"), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null)}, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                            Deslanged._TypeDeclaration("TokenizerEnumerator", true, false, false, false, false, (MemberAttributes.Final | MemberAttributes. Private), TypeAttributes.NotPublic, new CodeTypeParameter[0], new CodeTypeReference[] {
                                        new CodeTypeReference(typeof(object)),
                                        new CodeTypeReference("IEnumerator`1", new CodeTypeReference[] {
                                                    new CodeTypeReference("Token")})}, new CodeTypeMember[] {
                                        Deslanged._MemberField(new CodeTypeReference(typeof(int)), "ErrorSymbol", new CodePrimitiveExpression(-1), (MemberAttributes.Const | MemberAttributes. Public), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                        Deslanged._MemberField(new CodeTypeReference(typeof(int)), "_EosSymbol", new CodePrimitiveExpression(-2), (MemberAttributes.Const | MemberAttributes. Private), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                        Deslanged._MemberField(new CodeTypeReference(typeof(int)), "_Match", new CodePrimitiveExpression(1), MemberAttributes.Const, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[] {
                                                    new CodeRegionDirective(CodeRegionMode.Start, "Opcodes")}, new CodeDirective[0], null),
                                        Deslanged._MemberField(new CodeTypeReference(typeof(int)), "_Jmp", new CodePrimitiveExpression(2), MemberAttributes.Const, new CodeCommentStatement[] {
                                                    new CodeCommentStatement(" match symbol")}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                        Deslanged._MemberField(new CodeTypeReference(typeof(int)), "_Split", new CodePrimitiveExpression(3), MemberAttributes.Const, new CodeCommentStatement[] {
                                                    new CodeCommentStatement(" jmp addr")}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                        Deslanged._MemberField(new CodeTypeReference(typeof(int)), "_Any", new CodePrimitiveExpression(4), MemberAttributes.Const, new CodeCommentStatement[] {
                                                    new CodeCommentStatement(" split addr1, addr2")}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                        Deslanged._MemberField(new CodeTypeReference(typeof(int)), "_Char", new CodePrimitiveExpression(5), MemberAttributes.Const, new CodeCommentStatement[] {
                                                    new CodeCommentStatement(" any")}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                        Deslanged._MemberField(new CodeTypeReference(typeof(int)), "_Set", new CodePrimitiveExpression(6), MemberAttributes.Const, new CodeCommentStatement[] {
                                                    new CodeCommentStatement(" char ch")}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                        Deslanged._MemberField(new CodeTypeReference(typeof(int)), "_NSet", new CodePrimitiveExpression(7), MemberAttributes.Const, new CodeCommentStatement[] {
                                                    new CodeCommentStatement(" set packedRange1Left,packedRange1Right,packedRange2Left,packedRange2Right...")}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                        Deslanged._MemberField(new CodeTypeReference(typeof(int)), "_UCode", new CodePrimitiveExpression(8), MemberAttributes.Const, new CodeCommentStatement[] {
                                                    new CodeCommentStatement(" nset packedRange1Left,packedRange1Right,packedRange2Left,packedRange2Right...")}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                        Deslanged._MemberField(new CodeTypeReference(typeof(int)), "_NUCode", new CodePrimitiveExpression(9), MemberAttributes.Const, new CodeCommentStatement[] {
                                                    new CodeCommentStatement(" ucode cat")}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                        Deslanged._MemberField(new CodeTypeReference(typeof(int)), "_Save", new CodePrimitiveExpression(10), MemberAttributes.Const, new CodeCommentStatement[] {
                                                    new CodeCommentStatement(" nucode cat")}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                        Deslanged._MemberField(new CodeTypeReference(typeof(int)), "_Disposed", new CodePrimitiveExpression(-3), (MemberAttributes.Const | MemberAttributes. Private), new CodeCommentStatement[] {
                                                    new CodeCommentStatement(" save slot")}, new CodeAttributeDeclaration[0], new CodeDirective[] {
                                                    new CodeRegionDirective(CodeRegionMode.End, "")}, new CodeDirective[0], null),
                                        Deslanged._MemberField(new CodeTypeReference(typeof(int)), "_BeforeBegin", new CodePrimitiveExpression(-2), (MemberAttributes.Const | MemberAttributes. Private), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                        Deslanged._MemberField(new CodeTypeReference(typeof(int)), "_EndOfInput", new CodePrimitiveExpression(-1), (MemberAttributes.Const | MemberAttributes. Private), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                        Deslanged._MemberField(new CodeTypeReference(new CodeTypeReference(new CodeTypeReference(typeof(int)), 1), 1), "_program", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                        Deslanged._MemberField(new CodeTypeReference(new CodeTypeReference(typeof(string)), 1), "_blockEnds", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                        Deslanged._MemberField(new CodeTypeReference(new CodeTypeReference(typeof(int)), 1), "_nodeFlags", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                        Deslanged._MemberField(new CodeTypeReference(new CodeTypeReference("TokenizerFiber"), 1), "_currentFibers", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                        Deslanged._MemberField(new CodeTypeReference(new CodeTypeReference("TokenizerFiber"), 1), "_nextFibers", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                        Deslanged._MemberField(new CodeTypeReference("IEnumerator`1", new CodeTypeReference[] {
                                                        new CodeTypeReference(typeof(char))}), "_input", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                        Deslanged._MemberField(new CodeTypeReference("StringBuilder"), "_capture", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                        Deslanged._MemberField(new CodeTypeReference(typeof(int)), "_state", new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Lexly.TokenizerEnumerator")), "_BeforeBegin"), MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                        Deslanged._MemberField(new CodeTypeReference(typeof(int)), "_ch", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                        Deslanged._MemberField(new CodeTypeReference(typeof(int)), "_line", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                        Deslanged._MemberField(new CodeTypeReference(typeof(int)), "_column", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                        Deslanged._MemberField(new CodeTypeReference(typeof(long)), "_position", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                        Deslanged._MemberField(new CodeTypeReference(typeof(int)), "_oline", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                        Deslanged._MemberField(new CodeTypeReference(typeof(int)), "_ocolumn", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                        Deslanged._MemberField(new CodeTypeReference(typeof(long)), "_oposition", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                        Deslanged._MemberField(new CodeTypeReference(typeof(string)), "_value", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                        Deslanged._MemberField(new CodeTypeReference(typeof(int)), "_tabWidth", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                        Deslanged._MemberField(new CodeTypeReference("Token"), "_current", null, MemberAttributes.Private, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                        Deslanged._Constructor((MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[] {
                                                    new CodeParameterDeclarationExpression(new CodeTypeReference(new CodeTypeReference(new CodeTypeReference(typeof(int)), 1), 1), "program"),
                                                    new CodeParameterDeclarationExpression(new CodeTypeReference(new CodeTypeReference(typeof(string)), 1), "blockEnds"),
                                                    new CodeParameterDeclarationExpression(new CodeTypeReference(new CodeTypeReference(typeof(int)), 1), "nodeFlags"),
                                                    new CodeParameterDeclarationExpression(new CodeTypeReference("IEnumerator`1", new CodeTypeReference[] {
                                                                    new CodeTypeReference(typeof(char))}), "input"),
                                                    new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(int)), "tabWidth"),
                                                    new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(int)), "line"),
                                                    new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(int)), "column"),
                                                    new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(long)), "position")}, new CodeExpression[0], new CodeExpression[0], new CodeStatement[] {
                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_program"), new CodeArgumentReferenceExpression("program")),
                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_blockEnds"), new CodeArgumentReferenceExpression("blockEnds")),
                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_nodeFlags"), new CodeArgumentReferenceExpression("nodeFlags")),
                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_input"), new CodeArgumentReferenceExpression("input")),
                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_tabWidth"), new CodeArgumentReferenceExpression("tabWidth")),
                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_line"), new CodeArgumentReferenceExpression("line")),
                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_column"), new CodeArgumentReferenceExpression("column")),
                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_position"), new CodeArgumentReferenceExpression("position")),
                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_oline"), new CodeArgumentReferenceExpression("line")),
                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_ocolumn"), new CodeArgumentReferenceExpression("column")),
                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_oposition"), new CodeArgumentReferenceExpression("position")),
                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_capture"), new CodeObjectCreateExpression(new CodeTypeReference("StringBuilder"), new CodeExpression[] {
                                                                    new CodePrimitiveExpression(64)})),
                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_currentFibers"), new CodeArrayCreateExpression(new CodeTypeReference(new CodeTypeReference("TokenizerFiber"), 1), new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_program"), "Length"))),
                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_nextFibers"), new CodeArrayCreateExpression(new CodeTypeReference(new CodeTypeReference("TokenizerFiber"), 1), new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_program"), "Length"))),
                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_value"), new CodePrimitiveExpression(null)),
                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_ch"), new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Lexly.TokenizerEnumerator")), "_BeforeBegin")),
                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_current"), "SymbolId"), new CodePrimitiveExpression(-1))}, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                        Deslanged._MemberProperty(new CodeTypeReference("Token"), "Current", (MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                    new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(0), CodeBinaryOperatorType.GreaterThan, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state")), new CodeStatement[] {
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Lexly.TokenizerEnumerator")), "_BeforeBegin"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state")), new CodeStatement[] {
                                                                            new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("InvalidOperationException"), new CodeExpression[] {
                                                                                            new CodePrimitiveExpression("The cursor is before the beginning of the input.")}))}, new CodeStatement[0]),
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Lexly.TokenizerEnumerator")), "_EndOfInput"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state")), new CodeStatement[] {
                                                                            new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("InvalidOperationException"), new CodeExpression[] {
                                                                                            new CodePrimitiveExpression("The cursor is after the end of the input.")}))}, new CodeStatement[0]),
                                                                new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("ObjectDisposedException"), new CodeExpression[] {
                                                                                new CodePrimitiveExpression("TokenizerEnumerator")}))}, new CodeStatement[0]),
                                                    new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_current"))}, new CodeStatement[0], new CodeTypeReference[] {
                                                    new CodeTypeReference("IEnumerator`1", new CodeTypeReference[] {
                                                                new CodeTypeReference("Token")})}, null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                        Deslanged._MemberProperty(new CodeTypeReference(typeof(object)), "Current", ((MemberAttributes)(0)), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                    new CodeMethodReturnStatement(new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "Current"))}, new CodeStatement[0], new CodeTypeReference[0], new CodeTypeReference("IEnumerator"), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                        Deslanged._MemberMethod(new CodeTypeReference(typeof(void)), "Dispose", ((MemberAttributes)(0)), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                    new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Lexly.TokenizerEnumerator")), "_Disposed"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"))), new CodeStatement[] {
                                                                new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_input"), "Dispose"), new CodeExpression[0])),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_ch"), new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Lexly.TokenizerEnumerator")), "_Disposed")),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"), new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Lexly.TokenizerEnumerator")), "_Disposed"))}, new CodeStatement[0])}, new CodeTypeReference[0], new CodeTypeReference("IDisposable"), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                        Deslanged._MemberMethod(new CodeTypeReference(typeof(bool)), "MoveNext", ((MemberAttributes)(0)), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                    new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(0), CodeBinaryOperatorType.GreaterThan, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state")), new CodeStatement[] {
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Lexly.TokenizerEnumerator")), "_EndOfInput"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state")), new CodeStatement[] {
                                                                            new CodeMethodReturnStatement(new CodePrimitiveExpression(false))}, new CodeStatement[0]),
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Lexly.TokenizerEnumerator")), "_Disposed"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state")), new CodeStatement[] {
                                                                            new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("ObjectDisposedException"), new CodeExpression[] {
                                                                                            new CodePrimitiveExpression("TokenizerEnumerator")}))}, new CodeStatement[0])}, new CodeStatement[0]),
                                                    new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_ch"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Lexly.TokenizerEnumerator")), "_EndOfInput")), new CodeStatement[] {
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"), new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Lexly.TokenizerEnumerator")), "_EndOfInput")),
                                                                new CodeMethodReturnStatement(new CodePrimitiveExpression(false))}, new CodeStatement[0]),
                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_current"), new CodeDefaultValueExpression(new CodeTypeReference("Token"))),
                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_current"), "Line"), new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_line")),
                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_current"), "Column"), new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_column")),
                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_current"), "Position"), new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_position")),
                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_current"), "Skipped"), new CodePrimitiveExpression(null)),
                                                    new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_capture"), "Clear"), new CodeExpression[0])),
                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_current"), "SymbolId"), new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "_Lex"), new CodeExpression[0])),
                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_current"), "Value"), new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_value")),
                                                    new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(bool)), "done", new CodePrimitiveExpression(false)),
                                                    new CodeIterationStatement(new CodeSnippetStatement(""), new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeVariableReferenceExpression("done")), new CodeSnippetStatement(""), new CodeStatement[] {
                                                                new CodeAssignStatement(new CodeVariableReferenceExpression("done"), new CodePrimitiveExpression(true)),
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Lexly.TokenizerEnumerator")), "ErrorSymbol"), CodeBinaryOperatorType.LessThan, new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_current"), "SymbolId")), new CodeStatement[] {
                                                                            new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(string)), "be", new CodeArrayIndexerExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_blockEnds"), new CodeExpression[] {
                                                                                            new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_current"), "SymbolId")})),
                                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(null), CodeBinaryOperatorType.IdentityInequality, new CodeVariableReferenceExpression("be")), CodeBinaryOperatorType.BooleanAnd, new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeBinaryOperatorExpression(new CodePrimitiveExpression(0), CodeBinaryOperatorType.ValueEquality, new CodePropertyReferenceExpression(new CodeVariableReferenceExpression("be"), "Length")))), new CodeStatement[] {
                                                                                        new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "_TryReadUntilBlockEnd"), new CodeExpression[] {
                                                                                                            new CodeVariableReferenceExpression("be")})), new CodeStatement[] {
                                                                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_current"), "SymbolId"), new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Lexly.TokenizerEnumerator")), "ErrorSymbol"))}, new CodeStatement[0])}, new CodeStatement[0]),
                                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Lexly.TokenizerEnumerator")), "ErrorSymbol"), CodeBinaryOperatorType.LessThan, new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_current"), "SymbolId")), CodeBinaryOperatorType.BooleanAnd, new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeBinaryOperatorExpression(new CodePrimitiveExpression(0), CodeBinaryOperatorType.ValueEquality, new CodeBinaryOperatorExpression(new CodeArrayIndexerExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_nodeFlags"), new CodeExpression[] {
                                                                                                            new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_current"), "SymbolId")}), CodeBinaryOperatorType.BitwiseAnd, new CodePrimitiveExpression(1))))), new CodeStatement[] {
                                                                                        new CodeAssignStatement(new CodeVariableReferenceExpression("done"), new CodePrimitiveExpression(false)),
                                                                                        new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_ch"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Lexly.TokenizerEnumerator")), "_EndOfInput")), new CodeStatement[] {
                                                                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"), new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Lexly.TokenizerEnumerator")), "_EndOfInput")),
                                                                                                    new CodeMethodReturnStatement(new CodePrimitiveExpression(false))}, new CodeStatement[0]),
                                                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_current"), "Line"), new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_line")),
                                                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_current"), "Column"), new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_column")),
                                                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_current"), "Position"), new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_position")),
                                                                                        new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_capture"), "Clear"), new CodeExpression[0])),
                                                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_current"), "SymbolId"), new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "_Lex"), new CodeExpression[0]))}, new CodeStatement[0])}, new CodeStatement[0])}),
                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_current"), "Value"), new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_value")),
                                                    new CodeMethodReturnStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Lexly.TokenizerEnumerator")), "_EndOfInput"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"))))}, new CodeTypeReference[0], new CodeTypeReference("IEnumerator"), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                        Deslanged._MemberMethod(new CodeTypeReference(typeof(bool)), "_MoveNextInput", ((MemberAttributes)(0)), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                    new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_ch"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Lexly.TokenizerEnumerator")), "_EndOfInput")), new CodeStatement[] {
                                                                new CodeMethodReturnStatement(new CodePrimitiveExpression(false))}, new CodeStatement[0]),
                                                    new CodeConditionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_input"), "MoveNext"), new CodeExpression[0]), new CodeStatement[] {
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Lexly.TokenizerEnumerator")), "_BeforeBegin"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"))), new CodeStatement[] {
                                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_position"), new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_position"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))),
                                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression('\n'), CodeBinaryOperatorType.ValueEquality, new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_input"), "Current")), new CodeStatement[] {
                                                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_column"), new CodePrimitiveExpression(1)),
                                                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_line"), new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_line"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1)))}, new CodeStatement[] {
                                                                                        new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression('\t'), CodeBinaryOperatorType.ValueEquality, new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_input"), "Current")), new CodeStatement[] {
                                                                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_column"), new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_column"), CodeBinaryOperatorType.Add, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_tabWidth")))}, new CodeStatement[] {
                                                                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_column"), new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_column"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1)))})})}, new CodeStatement[] {
                                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression('\n'), CodeBinaryOperatorType.ValueEquality, new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_input"), "Current")), new CodeStatement[] {
                                                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_column"), new CodePrimitiveExpression(1)),
                                                                                        new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_line"), new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_line"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1)))}, new CodeStatement[] {
                                                                                        new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression('\t'), CodeBinaryOperatorType.ValueEquality, new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_input"), "Current")), new CodeStatement[] {
                                                                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_column"), new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_column"), CodeBinaryOperatorType.Add, new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_tabWidth"), CodeBinaryOperatorType.Subtract, new CodePrimitiveExpression(1))))}, new CodeStatement[0])})}),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_ch"), new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_input"), "Current")),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"), new CodePrimitiveExpression(0)),
                                                                new CodeMethodReturnStatement(new CodePrimitiveExpression(true))}, new CodeStatement[0]),
                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_ch"), new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Lexly.TokenizerEnumerator")), "_EndOfInput")),
                                                    new CodeMethodReturnStatement(new CodePrimitiveExpression(false))}, new CodeTypeReference[0], null, new CodeCommentStatement[] {
                                                    new CodeCommentStatement(" moves to the next position, updates the state accordingly, and tracks the cursor" +
                                                            " position")}, new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                        Deslanged._MemberMethod(new CodeTypeReference(typeof(bool)), "_TryReadUntil", ((MemberAttributes)(0)), new CodeParameterDeclarationExpression[] {
                                                    new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(char)), "character")}, new CodeStatement[] {
                                                    new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(char)), "ch", new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_input"), "Current")),
                                                    new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_capture"), "Append"), new CodeExpression[] {
                                                                    new CodeVariableReferenceExpression("ch")})),
                                                    new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("ch"), CodeBinaryOperatorType.ValueEquality, new CodeArgumentReferenceExpression("character")), new CodeStatement[] {
                                                                new CodeMethodReturnStatement(new CodePrimitiveExpression(true))}, new CodeStatement[0]),
                                                    new CodeIterationStatement(new CodeSnippetStatement(""), new CodeBinaryOperatorExpression(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "_MoveNextInput"), new CodeExpression[0]), CodeBinaryOperatorType.BooleanAnd, new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeBinaryOperatorExpression(new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_input"), "Current"), CodeBinaryOperatorType.ValueEquality, new CodeArgumentReferenceExpression("character")))), new CodeSnippetStatement(""), new CodeStatement[] {
                                                                new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_capture"), "Append"), new CodeExpression[] {
                                                                                new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_input"), "Current")}))}),
                                                    new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_ch"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Lexly.TokenizerEnumerator")), "_EndOfInput"))), new CodeStatement[] {
                                                                new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_capture"), "Append"), new CodeExpression[] {
                                                                                new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_input"), "Current")})),
                                                                new CodeMethodReturnStatement(new CodeBinaryOperatorExpression(new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_input"), "Current"), CodeBinaryOperatorType.ValueEquality, new CodeArgumentReferenceExpression("character")))}, new CodeStatement[0]),
                                                    new CodeMethodReturnStatement(new CodePrimitiveExpression(false))}, new CodeTypeReference[0], null, new CodeCommentStatement[] {
                                                    new CodeCommentStatement(" reads until the specified character, consuming it, returning false if it wasn\'t " +
                                                            "found")}, new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                        Deslanged._MemberMethod(new CodeTypeReference(typeof(bool)), "_TryReadUntilBlockEnd", ((MemberAttributes)(0)), new CodeParameterDeclarationExpression[] {
                                                    new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(string)), "blockEnd")}, new CodeStatement[] {
                                                    new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(int)), "ll", new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_capture"), "Length")),
                                                    new CodeIterationStatement(new CodeSnippetStatement(""), new CodeBinaryOperatorExpression(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Lexly.TokenizerEnumerator")), "_EndOfInput"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_ch"))), CodeBinaryOperatorType.BooleanAnd, new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "_TryReadUntil"), new CodeExpression[] {
                                                                        new CodeIndexerExpression(new CodeArgumentReferenceExpression("blockEnd"), new CodeExpression[] {
                                                                                    new CodePrimitiveExpression(0)})})), new CodeSnippetStatement(""), new CodeStatement[] {
                                                                new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(bool)), "found", new CodePrimitiveExpression(true)),
                                                                new CodeIterationStatement(new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(int)), "i", new CodePrimitiveExpression(1)), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("found"), CodeBinaryOperatorType.BooleanAnd, new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("i"), CodeBinaryOperatorType.LessThan, new CodePropertyReferenceExpression(new CodeArgumentReferenceExpression("blockEnd"), "Length"))), new CodeAssignStatement(new CodeVariableReferenceExpression("i"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("i"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))), new CodeStatement[] {
                                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "_MoveNextInput"), new CodeExpression[0])), CodeBinaryOperatorType.BooleanOr, new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeBinaryOperatorExpression(new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_input"), "Current"), CodeBinaryOperatorType.ValueEquality, new CodeIndexerExpression(new CodeArgumentReferenceExpression("blockEnd"), new CodeExpression[] {
                                                                                                        new CodeVariableReferenceExpression("i")})))), new CodeStatement[] {
                                                                                        new CodeAssignStatement(new CodeVariableReferenceExpression("found"), new CodePrimitiveExpression(false))}, new CodeStatement[] {
                                                                                        new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Lexly.TokenizerEnumerator")), "_EndOfInput"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_ch"))), new CodeStatement[] {
                                                                                                    new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_capture"), "Append"), new CodeExpression[] {
                                                                                                                    new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_input"), "Current")}))}, new CodeStatement[0])})}),
                                                                new CodeConditionStatement(new CodeVariableReferenceExpression("found"), new CodeStatement[] {
                                                                            new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "_MoveNextInput"), new CodeExpression[0])),
                                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_value"), new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_capture"), "ToString"), new CodeExpression[] {
                                                                                            new CodeVariableReferenceExpression("ll"),
                                                                                            new CodeBinaryOperatorExpression(new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_capture"), "Length"), CodeBinaryOperatorType.Subtract, new CodeVariableReferenceExpression("ll"))})),
                                                                            new CodeMethodReturnStatement(new CodePrimitiveExpression(true))}, new CodeStatement[0])}),
                                                    new CodeMethodReturnStatement(new CodePrimitiveExpression(false))}, new CodeTypeReference[0], null, new CodeCommentStatement[] {
                                                    new CodeCommentStatement(" reads until the string is encountered, capturing it.")}, new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                        Deslanged._MemberMethod(new CodeTypeReference(typeof(void)), "Reset", ((MemberAttributes)(0)), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                    new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Lexly.TokenizerEnumerator")), "_BeforeBegin"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"))), new CodeStatement[] {
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Lexly.TokenizerEnumerator")), "_Disposed"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state")), new CodeStatement[] {
                                                                            new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("ObjectDisposedException"), new CodeExpression[] {
                                                                                            new CodePrimitiveExpression("TokenizerEnumerator")}))}, new CodeStatement[0]),
                                                                new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_input"), "Reset"), new CodeExpression[0])),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_ch"), new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Lexly.TokenizerEnumerator")), "_BeforeBegin")),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_line"), new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_oline")),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_column"), new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_ocolumn")),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_position"), new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_oposition")),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"), new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Lexly.TokenizerEnumerator")), "_BeforeBegin"))}, new CodeStatement[0])}, new CodeTypeReference[0], new CodeTypeReference("IEnumerator"), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                        Deslanged._MemberMethod(new CodeTypeReference(typeof(void)), "_EnqueueFiber", MemberAttributes.Static, new CodeParameterDeclarationExpression[] {
                                                    Deslanged._ParameterDeclarationExpression(new CodeTypeReference(typeof(int)), "lcount", FieldDirection.Ref, new CodeAttributeDeclaration[0]),
                                                    Deslanged._ParameterDeclarationExpression(new CodeTypeReference(new CodeTypeReference("TokenizerFiber"), 1), "l", FieldDirection.Ref, new CodeAttributeDeclaration[0]),
                                                    new CodeParameterDeclarationExpression(new CodeTypeReference("TokenizerFiber"), "t"),
                                                    new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(int)), "sp")}, new CodeStatement[] {
                                                    new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePropertyReferenceExpression(new CodeArgumentReferenceExpression("l"), "Length"), CodeBinaryOperatorType.LessThanOrEqual, new CodeArgumentReferenceExpression("lcount")), new CodeStatement[] {
                                                                new CodeVariableDeclarationStatement(new CodeTypeReference(new CodeTypeReference("TokenizerFiber"), 1), "newarr", new CodeArrayCreateExpression(new CodeTypeReference(new CodeTypeReference("TokenizerFiber"), 1), new CodeBinaryOperatorExpression(new CodePropertyReferenceExpression(new CodeArgumentReferenceExpression("l"), "Length"), CodeBinaryOperatorType.Multiply, new CodePrimitiveExpression(2)))),
                                                                new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference(typeof(System.Array))), "Copy"), new CodeExpression[] {
                                                                                new CodeArgumentReferenceExpression("l"),
                                                                                new CodePrimitiveExpression(0),
                                                                                new CodeVariableReferenceExpression("newarr"),
                                                                                new CodePrimitiveExpression(0),
                                                                                new CodePropertyReferenceExpression(new CodeArgumentReferenceExpression("l"), "Length")})),
                                                                new CodeAssignStatement(new CodeArgumentReferenceExpression("l"), new CodeVariableReferenceExpression("newarr"))}, new CodeStatement[0]),
                                                    new CodeAssignStatement(new CodeArrayIndexerExpression(new CodeArgumentReferenceExpression("l"), new CodeExpression[] {
                                                                    new CodeArgumentReferenceExpression("lcount")}), new CodeArgumentReferenceExpression("t")),
                                                    new CodeAssignStatement(new CodeArgumentReferenceExpression("lcount"), new CodeBinaryOperatorExpression(new CodeArgumentReferenceExpression("lcount"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))),
                                                    new CodeVariableDeclarationStatement(new CodeTypeReference(new CodeTypeReference(typeof(int)), 1), "pc", new CodeArrayIndexerExpression(new CodeFieldReferenceExpression(new CodeArgumentReferenceExpression("t"), "Program"), new CodeExpression[] {
                                                                    new CodeFieldReferenceExpression(new CodeArgumentReferenceExpression("t"), "Index")})),
                                                    new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(int)), "op", new CodeArrayIndexerExpression(new CodeVariableReferenceExpression("pc"), new CodeExpression[] {
                                                                    new CodePrimitiveExpression(0)})),
                                                    new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Lexly.TokenizerEnumerator")), "_Jmp"), CodeBinaryOperatorType.ValueEquality, new CodeVariableReferenceExpression("op")), new CodeStatement[] {
                                                                new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Lexly.TokenizerEnumerator")), "_EnqueueFiber"), new CodeExpression[] {
                                                                                new CodeDirectionExpression(FieldDirection.Ref, new CodeArgumentReferenceExpression("lcount")),
                                                                                new CodeDirectionExpression(FieldDirection.Ref, new CodeArgumentReferenceExpression("l")),
                                                                                new CodeObjectCreateExpression(new CodeTypeReference("TokenizerFiber"), new CodeExpression[] {
                                                                                            new CodeArgumentReferenceExpression("t"),
                                                                                            new CodeArrayIndexerExpression(new CodeVariableReferenceExpression("pc"), new CodeExpression[] {
                                                                                                        new CodePrimitiveExpression(1)}),
                                                                                            new CodeFieldReferenceExpression(new CodeArgumentReferenceExpression("t"), "Saved")}),
                                                                                new CodeArgumentReferenceExpression("sp")})),
                                                                new CodeMethodReturnStatement(null)}, new CodeStatement[0]),
                                                    new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Lexly.TokenizerEnumerator")), "_Split"), CodeBinaryOperatorType.ValueEquality, new CodeVariableReferenceExpression("op")), new CodeStatement[] {
                                                                new CodeIterationStatement(new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(int)), "j", new CodePrimitiveExpression(1)), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("j"), CodeBinaryOperatorType.LessThan, new CodePropertyReferenceExpression(new CodeVariableReferenceExpression("pc"), "Length")), new CodeAssignStatement(new CodeVariableReferenceExpression("j"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("j"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))), new CodeStatement[] {
                                                                            new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Lexly.TokenizerEnumerator")), "_EnqueueFiber"), new CodeExpression[] {
                                                                                            new CodeDirectionExpression(FieldDirection.Ref, new CodeArgumentReferenceExpression("lcount")),
                                                                                            new CodeDirectionExpression(FieldDirection.Ref, new CodeArgumentReferenceExpression("l")),
                                                                                            new CodeObjectCreateExpression(new CodeTypeReference("TokenizerFiber"), new CodeExpression[] {
                                                                                                        new CodeFieldReferenceExpression(new CodeArgumentReferenceExpression("t"), "Program"),
                                                                                                        new CodeArrayIndexerExpression(new CodeVariableReferenceExpression("pc"), new CodeExpression[] {
                                                                                                                    new CodeVariableReferenceExpression("j")}),
                                                                                                        new CodeFieldReferenceExpression(new CodeArgumentReferenceExpression("t"), "Saved")}),
                                                                                            new CodeArgumentReferenceExpression("sp")}))}),
                                                                new CodeMethodReturnStatement(null)}, new CodeStatement[0]),
                                                    new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Lexly.TokenizerEnumerator")), "_Save"), CodeBinaryOperatorType.ValueEquality, new CodeVariableReferenceExpression("op")), new CodeStatement[] {
                                                                new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(int)), "slot", new CodeArrayIndexerExpression(new CodeVariableReferenceExpression("pc"), new CodeExpression[] {
                                                                                new CodePrimitiveExpression(1)})),
                                                                new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(int)), "max", new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeArgumentReferenceExpression("t"), "Saved"), "Length")),
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("slot"), CodeBinaryOperatorType.GreaterThan, new CodeVariableReferenceExpression("max")), new CodeStatement[] {
                                                                            new CodeAssignStatement(new CodeVariableReferenceExpression("max"), new CodeVariableReferenceExpression("slot"))}, new CodeStatement[0]),
                                                                new CodeVariableDeclarationStatement(new CodeTypeReference(new CodeTypeReference(typeof(int)), 1), "saved", new CodeArrayCreateExpression(new CodeTypeReference(new CodeTypeReference(typeof(int)), 1), new CodeVariableReferenceExpression("max"))),
                                                                new CodeIterationStatement(new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(int)), "i", new CodePrimitiveExpression(0)), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("i"), CodeBinaryOperatorType.LessThan, new CodePropertyReferenceExpression(new CodeFieldReferenceExpression(new CodeArgumentReferenceExpression("t"), "Saved"), "Length")), new CodeAssignStatement(new CodeVariableReferenceExpression("i"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("i"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))), new CodeStatement[] {
                                                                            new CodeAssignStatement(new CodeArrayIndexerExpression(new CodeVariableReferenceExpression("saved"), new CodeExpression[] {
                                                                                            new CodeVariableReferenceExpression("i")}), new CodeArrayIndexerExpression(new CodeFieldReferenceExpression(new CodeArgumentReferenceExpression("t"), "Saved"), new CodeExpression[] {
                                                                                            new CodeVariableReferenceExpression("i")}))}),
                                                                new CodeAssignStatement(new CodeArrayIndexerExpression(new CodeVariableReferenceExpression("saved"), new CodeExpression[] {
                                                                                new CodeVariableReferenceExpression("slot")}), new CodeArgumentReferenceExpression("sp")),
                                                                new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Lexly.TokenizerEnumerator")), "_EnqueueFiber"), new CodeExpression[] {
                                                                                new CodeDirectionExpression(FieldDirection.Ref, new CodeArgumentReferenceExpression("lcount")),
                                                                                new CodeDirectionExpression(FieldDirection.Ref, new CodeArgumentReferenceExpression("l")),
                                                                                new CodeObjectCreateExpression(new CodeTypeReference("TokenizerFiber"), new CodeExpression[] {
                                                                                            new CodeArgumentReferenceExpression("t"),
                                                                                            new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeArgumentReferenceExpression("t"), "Index"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1)),
                                                                                            new CodeVariableReferenceExpression("saved")}),
                                                                                new CodeArgumentReferenceExpression("sp")})),
                                                                new CodeMethodReturnStatement(null)}, new CodeStatement[0])}, new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                        Deslanged._MemberMethod(new CodeTypeReference(typeof(bool)), "_InRanges", MemberAttributes.Static, new CodeParameterDeclarationExpression[] {
                                                    new CodeParameterDeclarationExpression(new CodeTypeReference(new CodeTypeReference(typeof(int)), 1), "pc"),
                                                    new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(int)), "ch")}, new CodeStatement[] {
                                                    new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(bool)), "found", new CodePrimitiveExpression(false)),
                                                    new CodeIterationStatement(new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(int)), "j", new CodePrimitiveExpression(1)), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("j"), CodeBinaryOperatorType.LessThan, new CodePropertyReferenceExpression(new CodeArgumentReferenceExpression("pc"), "Length")), new CodeAssignStatement(new CodeVariableReferenceExpression("j"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("j"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))), new CodeStatement[] {
                                                                new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(int)), "first", new CodeArrayIndexerExpression(new CodeArgumentReferenceExpression("pc"), new CodeExpression[] {
                                                                                new CodeVariableReferenceExpression("j")})),
                                                                new CodeAssignStatement(new CodeVariableReferenceExpression("j"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("j"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))),
                                                                new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(int)), "last", new CodeArrayIndexerExpression(new CodeArgumentReferenceExpression("pc"), new CodeExpression[] {
                                                                                new CodeVariableReferenceExpression("j")})),
                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeArgumentReferenceExpression("ch"), CodeBinaryOperatorType.LessThanOrEqual, new CodeVariableReferenceExpression("last")), new CodeStatement[] {
                                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("first"), CodeBinaryOperatorType.LessThanOrEqual, new CodeArgumentReferenceExpression("ch")), new CodeStatement[] {
                                                                                        new CodeAssignStatement(new CodeVariableReferenceExpression("found"), new CodePrimitiveExpression(true))}, new CodeStatement[0]),
                                                                            new CodeAssignStatement(new CodeVariableReferenceExpression("j"), new CodePropertyReferenceExpression(new CodeArgumentReferenceExpression("pc"), "Length"))}, new CodeStatement[0])}),
                                                    new CodeMethodReturnStatement(new CodeVariableReferenceExpression("found"))}, new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                        Deslanged._MemberMethod(new CodeTypeReference(typeof(int)), "_Lex", ((MemberAttributes)(0)), new CodeParameterDeclarationExpression[0], new CodeStatement[] {
                                                    new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_capture"), "Clear"), new CodeExpression[0])),
                                                    new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_state"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Lexly.TokenizerEnumerator")), "_BeforeBegin")), new CodeStatement[] {
                                                                new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "_MoveNextInput"), new CodeExpression[0]))}, new CodeStatement[0]),
                                                    new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(int)), "i", null),
                                                    new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(int)), "match", new CodePrimitiveExpression(-1)),
                                                    new CodeVariableDeclarationStatement(new CodeTypeReference(new CodeTypeReference("TokenizerFiber"), 1), "tmp", null),
                                                    new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(int)), "currentFiberCount", new CodePrimitiveExpression(0)),
                                                    new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(int)), "nextFiberCount", new CodePrimitiveExpression(0)),
                                                    new CodeVariableDeclarationStatement(new CodeTypeReference(new CodeTypeReference(typeof(int)), 1), "pc", null),
                                                    new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(int)), "sp", new CodePrimitiveExpression(0)),
                                                    new CodeVariableDeclarationStatement(new CodeTypeReference(new CodeTypeReference(typeof(int)), 1), "saved", null),
                                                    new CodeVariableDeclarationStatement(new CodeTypeReference(new CodeTypeReference(typeof(int)), 1), "matched", null),
                                                    new CodeAssignStatement(new CodeVariableReferenceExpression("saved"), new CodeArrayCreateExpression(new CodeTypeReference(new CodeTypeReference(typeof(int)), 1), new CodePrimitiveExpression(2))),
                                                    new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Lexly.TokenizerEnumerator")), "_EnqueueFiber"), new CodeExpression[] {
                                                                    new CodeDirectionExpression(FieldDirection.Ref, new CodeVariableReferenceExpression("currentFiberCount")),
                                                                    new CodeDirectionExpression(FieldDirection.Ref, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_currentFibers")),
                                                                    new CodeObjectCreateExpression(new CodeTypeReference("TokenizerFiber"), new CodeExpression[] {
                                                                                new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_program"),
                                                                                new CodePrimitiveExpression(0),
                                                                                new CodeVariableReferenceExpression("saved")}),
                                                                    new CodePrimitiveExpression(0)})),
                                                    new CodeAssignStatement(new CodeVariableReferenceExpression("matched"), new CodePrimitiveExpression(null)),
                                                    new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(int)), "cur", new CodePrimitiveExpression(-1)),
                                                    new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Lexly.TokenizerEnumerator")), "_EndOfInput"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_ch"))), new CodeStatement[] {
                                                                new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(char)), "ch1", new CodeCastExpression(new CodeTypeReference(typeof(char)), new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_ch"))),
                                                                new CodeConditionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference(typeof(char))), "IsHighSurrogate"), new CodeExpression[] {
                                                                                new CodeVariableReferenceExpression("ch1")}), new CodeStatement[] {
                                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "_MoveNextInput"), new CodeExpression[0])), new CodeStatement[] {
                                                                                        new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("IOException"), new CodeExpression[] {
                                                                                                        new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference(typeof(string))), "Format"), new CodeExpression[] {
                                                                                                                    new CodePrimitiveExpression("Expecting low surrogate in unicode stream. The input source is corrupt or not val" +
                                                                                                                            "id Unicode at line {0}, column {1}, position {2}"),
                                                                                                                    new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_line"),
                                                                                                                    new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_column"),
                                                                                                                    new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_position")})}))}, new CodeStatement[0]),
                                                                            new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_column"), new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_column"), CodeBinaryOperatorType.Subtract, new CodePrimitiveExpression(1))),
                                                                            new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(char)), "ch2", new CodeCastExpression(new CodeTypeReference(typeof(char)), new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_ch"))),
                                                                            new CodeAssignStatement(new CodeVariableReferenceExpression("cur"), new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference(typeof(char))), "ConvertToUtf32"), new CodeExpression[] {
                                                                                            new CodeVariableReferenceExpression("ch1"),
                                                                                            new CodeVariableReferenceExpression("ch2")}))}, new CodeStatement[] {
                                                                            new CodeAssignStatement(new CodeVariableReferenceExpression("cur"), new CodeVariableReferenceExpression("ch1"))})}, new CodeStatement[] {
                                                                new CodeAssignStatement(new CodeVariableReferenceExpression("cur"), new CodePrimitiveExpression(-1))}),
                                                    new CodeIterationStatement(new CodeSnippetStatement(""), new CodeBinaryOperatorExpression(new CodePrimitiveExpression(0), CodeBinaryOperatorType.LessThan, new CodeVariableReferenceExpression("currentFiberCount")), new CodeSnippetStatement(""), new CodeStatement[] {
                                                                new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(bool)), "passed", new CodePrimitiveExpression(false)),
                                                                new CodeIterationStatement(new CodeAssignStatement(new CodeVariableReferenceExpression("i"), new CodePrimitiveExpression(0)), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("i"), CodeBinaryOperatorType.LessThan, new CodeVariableReferenceExpression("currentFiberCount")), new CodeAssignStatement(new CodeVariableReferenceExpression("i"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("i"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))), new CodeStatement[] {
                                                                            new CodeVariableDeclarationStatement(new CodeTypeReference("TokenizerFiber"), "t", new CodeArrayIndexerExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_currentFibers"), new CodeExpression[] {
                                                                                            new CodeVariableReferenceExpression("i")})),
                                                                            new CodeAssignStatement(new CodeVariableReferenceExpression("pc"), new CodeArrayIndexerExpression(new CodeFieldReferenceExpression(new CodeVariableReferenceExpression("t"), "Program"), new CodeExpression[] {
                                                                                            new CodeFieldReferenceExpression(new CodeVariableReferenceExpression("t"), "Index")})),
                                                                            new CodeAssignStatement(new CodeVariableReferenceExpression("saved"), new CodeFieldReferenceExpression(new CodeVariableReferenceExpression("t"), "Saved")),
                                                                            new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(int)), "op", new CodeArrayIndexerExpression(new CodeVariableReferenceExpression("pc"), new CodeExpression[] {
                                                                                            new CodePrimitiveExpression(0)})),
                                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Lexly.TokenizerEnumerator")), "_Char"), CodeBinaryOperatorType.ValueEquality, new CodeVariableReferenceExpression("op")), new CodeStatement[] {
                                                                                        new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("cur"), CodeBinaryOperatorType.ValueEquality, new CodeArrayIndexerExpression(new CodeVariableReferenceExpression("pc"), new CodeExpression[] {
                                                                                                            new CodePrimitiveExpression(1)})), new CodeStatement[] {
                                                                                                    new CodeAssignStatement(new CodeVariableReferenceExpression("passed"), new CodePrimitiveExpression(true)),
                                                                                                    new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Lexly.TokenizerEnumerator")), "_EnqueueFiber"), new CodeExpression[] {
                                                                                                                    new CodeDirectionExpression(FieldDirection.Ref, new CodeVariableReferenceExpression("nextFiberCount")),
                                                                                                                    new CodeDirectionExpression(FieldDirection.Ref, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_nextFibers")),
                                                                                                                    new CodeObjectCreateExpression(new CodeTypeReference("TokenizerFiber"), new CodeExpression[] {
                                                                                                                                new CodeVariableReferenceExpression("t"),
                                                                                                                                new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeVariableReferenceExpression("t"), "Index"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1)),
                                                                                                                                new CodeVariableReferenceExpression("saved")}),
                                                                                                                    new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("sp"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))}))}, new CodeStatement[0])}, new CodeStatement[] {
                                                                                        new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Lexly.TokenizerEnumerator")), "_Set"), CodeBinaryOperatorType.ValueEquality, new CodeVariableReferenceExpression("op")), new CodeStatement[] {
                                                                                                    new CodeConditionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Lexly.TokenizerEnumerator")), "_InRanges"), new CodeExpression[] {
                                                                                                                    new CodeVariableReferenceExpression("pc"),
                                                                                                                    new CodeVariableReferenceExpression("cur")}), new CodeStatement[] {
                                                                                                                new CodeAssignStatement(new CodeVariableReferenceExpression("passed"), new CodePrimitiveExpression(true)),
                                                                                                                new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Lexly.TokenizerEnumerator")), "_EnqueueFiber"), new CodeExpression[] {
                                                                                                                                new CodeDirectionExpression(FieldDirection.Ref, new CodeVariableReferenceExpression("nextFiberCount")),
                                                                                                                                new CodeDirectionExpression(FieldDirection.Ref, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_nextFibers")),
                                                                                                                                new CodeObjectCreateExpression(new CodeTypeReference("TokenizerFiber"), new CodeExpression[] {
                                                                                                                                            new CodeVariableReferenceExpression("t"),
                                                                                                                                            new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeVariableReferenceExpression("t"), "Index"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1)),
                                                                                                                                            new CodeVariableReferenceExpression("saved")}),
                                                                                                                                new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("sp"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))}))}, new CodeStatement[0])}, new CodeStatement[] {
                                                                                                    new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Lexly.TokenizerEnumerator")), "_NSet"), CodeBinaryOperatorType.ValueEquality, new CodeVariableReferenceExpression("op")), new CodeStatement[] {
                                                                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Lexly.TokenizerEnumerator")), "_InRanges"), new CodeExpression[] {
                                                                                                                                        new CodeVariableReferenceExpression("pc"),
                                                                                                                                        new CodeVariableReferenceExpression("cur")})), CodeBinaryOperatorType.BooleanAnd, new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Lexly.TokenizerEnumerator")), "_EndOfInput"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_ch")))), new CodeStatement[] {
                                                                                                                            new CodeAssignStatement(new CodeVariableReferenceExpression("passed"), new CodePrimitiveExpression(true)),
                                                                                                                            new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Lexly.TokenizerEnumerator")), "_EnqueueFiber"), new CodeExpression[] {
                                                                                                                                            new CodeDirectionExpression(FieldDirection.Ref, new CodeVariableReferenceExpression("nextFiberCount")),
                                                                                                                                            new CodeDirectionExpression(FieldDirection.Ref, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_nextFibers")),
                                                                                                                                            new CodeObjectCreateExpression(new CodeTypeReference("TokenizerFiber"), new CodeExpression[] {
                                                                                                                                                        new CodeVariableReferenceExpression("t"),
                                                                                                                                                        new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeVariableReferenceExpression("t"), "Index"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1)),
                                                                                                                                                        new CodeVariableReferenceExpression("saved")}),
                                                                                                                                            new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("sp"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))}))}, new CodeStatement[0])}, new CodeStatement[] {
                                                                                                                new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Lexly.TokenizerEnumerator")), "_UCode"), CodeBinaryOperatorType.ValueEquality, new CodeVariableReferenceExpression("op")), new CodeStatement[] {
                                                                                                                            new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(string)), "str", new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference(typeof(char))), "ConvertFromUtf32"), new CodeExpression[] {
                                                                                                                                            new CodeVariableReferenceExpression("cur")})),
                                                                                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeCastExpression(new CodeTypeReference(typeof(int)), new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference(typeof(char))), "GetUnicodeCategory"), new CodeExpression[] {
                                                                                                                                                    new CodeVariableReferenceExpression("str"),
                                                                                                                                                    new CodePrimitiveExpression(0)})), CodeBinaryOperatorType.ValueEquality, new CodeArrayIndexerExpression(new CodeVariableReferenceExpression("pc"), new CodeExpression[] {
                                                                                                                                                new CodePrimitiveExpression(1)})), new CodeStatement[] {
                                                                                                                                        new CodeAssignStatement(new CodeVariableReferenceExpression("passed"), new CodePrimitiveExpression(true)),
                                                                                                                                        new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Lexly.TokenizerEnumerator")), "_EnqueueFiber"), new CodeExpression[] {
                                                                                                                                                        new CodeDirectionExpression(FieldDirection.Ref, new CodeVariableReferenceExpression("nextFiberCount")),
                                                                                                                                                        new CodeDirectionExpression(FieldDirection.Ref, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_nextFibers")),
                                                                                                                                                        new CodeObjectCreateExpression(new CodeTypeReference("TokenizerFiber"), new CodeExpression[] {
                                                                                                                                                                    new CodeVariableReferenceExpression("t"),
                                                                                                                                                                    new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeVariableReferenceExpression("t"), "Index"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1)),
                                                                                                                                                                    new CodeVariableReferenceExpression("saved")}),
                                                                                                                                                        new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("sp"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))}))}, new CodeStatement[0])}, new CodeStatement[] {
                                                                                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Lexly.TokenizerEnumerator")), "_NUCode"), CodeBinaryOperatorType.ValueEquality, new CodeVariableReferenceExpression("op")), new CodeStatement[] {
                                                                                                                                        new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(string)), "str", new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference(typeof(char))), "ConvertFromUtf32"), new CodeExpression[] {
                                                                                                                                                        new CodeVariableReferenceExpression("cur")})),
                                                                                                                                        new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeBinaryOperatorExpression(new CodeCastExpression(new CodeTypeReference(typeof(int)), new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference(typeof(char))), "GetUnicodeCategory"), new CodeExpression[] {
                                                                                                                                                                        new CodeVariableReferenceExpression("str"),
                                                                                                                                                                        new CodePrimitiveExpression(0)})), CodeBinaryOperatorType.ValueEquality, new CodeArrayIndexerExpression(new CodeVariableReferenceExpression("pc"), new CodeExpression[] {
                                                                                                                                                                    new CodePrimitiveExpression(1)}))), CodeBinaryOperatorType.BooleanAnd, new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Lexly.TokenizerEnumerator")), "_EndOfInput"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_ch")))), new CodeStatement[] {
                                                                                                                                                    new CodeAssignStatement(new CodeVariableReferenceExpression("passed"), new CodePrimitiveExpression(true)),
                                                                                                                                                    new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Lexly.TokenizerEnumerator")), "_EnqueueFiber"), new CodeExpression[] {
                                                                                                                                                                    new CodeDirectionExpression(FieldDirection.Ref, new CodeVariableReferenceExpression("nextFiberCount")),
                                                                                                                                                                    new CodeDirectionExpression(FieldDirection.Ref, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_nextFibers")),
                                                                                                                                                                    new CodeObjectCreateExpression(new CodeTypeReference("TokenizerFiber"), new CodeExpression[] {
                                                                                                                                                                                new CodeVariableReferenceExpression("t"),
                                                                                                                                                                                new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeVariableReferenceExpression("t"), "Index"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1)),
                                                                                                                                                                                new CodeVariableReferenceExpression("saved")}),
                                                                                                                                                                    new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("sp"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))}))}, new CodeStatement[0])}, new CodeStatement[] {
                                                                                                                                        new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Lexly.TokenizerEnumerator")), "_Any"), CodeBinaryOperatorType.ValueEquality, new CodeVariableReferenceExpression("op")), new CodeStatement[] {
                                                                                                                                                    new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Lexly.TokenizerEnumerator")), "_EndOfInput"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_ch"))), new CodeStatement[] {
                                                                                                                                                                new CodeAssignStatement(new CodeVariableReferenceExpression("passed"), new CodePrimitiveExpression(true)),
                                                                                                                                                                new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Lexly.TokenizerEnumerator")), "_EnqueueFiber"), new CodeExpression[] {
                                                                                                                                                                                new CodeDirectionExpression(FieldDirection.Ref, new CodeVariableReferenceExpression("nextFiberCount")),
                                                                                                                                                                                new CodeDirectionExpression(FieldDirection.Ref, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_nextFibers")),
                                                                                                                                                                                new CodeObjectCreateExpression(new CodeTypeReference("TokenizerFiber"), new CodeExpression[] {
                                                                                                                                                                                            new CodeVariableReferenceExpression("t"),
                                                                                                                                                                                            new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeVariableReferenceExpression("t"), "Index"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1)),
                                                                                                                                                                                            new CodeVariableReferenceExpression("saved")}),
                                                                                                                                                                                new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("sp"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))}))}, new CodeStatement[0])}, new CodeStatement[] {
                                                                                                                                                    new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Lexly.TokenizerEnumerator")), "_Match"), CodeBinaryOperatorType.ValueEquality, new CodeVariableReferenceExpression("op")), new CodeStatement[] {
                                                                                                                                                                new CodeAssignStatement(new CodeVariableReferenceExpression("matched"), new CodeVariableReferenceExpression("saved")),
                                                                                                                                                                new CodeAssignStatement(new CodeVariableReferenceExpression("match"), new CodeArrayIndexerExpression(new CodeVariableReferenceExpression("pc"), new CodeExpression[] {
                                                                                                                                                                                new CodePrimitiveExpression(1)})),
                                                                                                                                                                new CodeAssignStatement(new CodeVariableReferenceExpression("i"), new CodeVariableReferenceExpression("currentFiberCount"))}, new CodeStatement[0])})})})})})})}),
                                                                new CodeConditionStatement(new CodeVariableReferenceExpression("passed"), new CodeStatement[] {
                                                                            new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_capture"), "Append"), new CodeExpression[] {
                                                                                            new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference(typeof(char))), "ConvertFromUtf32"), new CodeExpression[] {
                                                                                                        new CodeVariableReferenceExpression("cur")})})),
                                                                            new CodeExpressionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "_MoveNextInput"), new CodeExpression[0])),
                                                                            new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Lexly.TokenizerEnumerator")), "_EndOfInput"), CodeBinaryOperatorType.ValueEquality, new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_ch"))), new CodeStatement[] {
                                                                                        new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(char)), "ch1", new CodeCastExpression(new CodeTypeReference(typeof(char)), new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_ch"))),
                                                                                        new CodeConditionStatement(new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference(typeof(char))), "IsHighSurrogate"), new CodeExpression[] {
                                                                                                        new CodeVariableReferenceExpression("ch1")}), new CodeStatement[] {
                                                                                                    new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(false), CodeBinaryOperatorType.ValueEquality, new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), "_MoveNextInput"), new CodeExpression[0])), new CodeStatement[] {
                                                                                                                new CodeThrowExceptionStatement(new CodeObjectCreateExpression(new CodeTypeReference("IOException"), new CodeExpression[] {
                                                                                                                                new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference(typeof(string))), "Format"), new CodeExpression[] {
                                                                                                                                            new CodePrimitiveExpression("Expecting low surrogate in unicode stream. The input source is corrupt or not val" +
                                                                                                                                                    "id Unicode at line {0}, column {1}, position {2}"),
                                                                                                                                            new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_line"),
                                                                                                                                            new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_column"),
                                                                                                                                            new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_position")})}))}, new CodeStatement[0]),
                                                                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_column"), new CodeBinaryOperatorExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_column"), CodeBinaryOperatorType.Subtract, new CodePrimitiveExpression(1))),
                                                                                                    new CodeAssignStatement(new CodeVariableReferenceExpression("sp"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("sp"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1))),
                                                                                                    new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(char)), "ch2", new CodeCastExpression(new CodeTypeReference(typeof(char)), new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_ch"))),
                                                                                                    new CodeAssignStatement(new CodeVariableReferenceExpression("cur"), new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference(typeof(char))), "ConvertToUtf32"), new CodeExpression[] {
                                                                                                                    new CodeVariableReferenceExpression("ch1"),
                                                                                                                    new CodeVariableReferenceExpression("ch2")}))}, new CodeStatement[] {
                                                                                                    new CodeAssignStatement(new CodeVariableReferenceExpression("cur"), new CodeVariableReferenceExpression("ch1"))})}, new CodeStatement[] {
                                                                                        new CodeAssignStatement(new CodeVariableReferenceExpression("cur"), new CodePrimitiveExpression(-1))}),
                                                                            new CodeAssignStatement(new CodeVariableReferenceExpression("sp"), new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("sp"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1)))}, new CodeStatement[0]),
                                                                new CodeAssignStatement(new CodeVariableReferenceExpression("tmp"), new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_currentFibers")),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_currentFibers"), new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_nextFibers")),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_nextFibers"), new CodeVariableReferenceExpression("tmp")),
                                                                new CodeAssignStatement(new CodeVariableReferenceExpression("currentFiberCount"), new CodeVariableReferenceExpression("nextFiberCount")),
                                                                new CodeAssignStatement(new CodeVariableReferenceExpression("nextFiberCount"), new CodePrimitiveExpression(0))}),
                                                    new CodeConditionStatement(new CodeBinaryOperatorExpression(new CodePrimitiveExpression(null), CodeBinaryOperatorType.IdentityInequality, new CodeVariableReferenceExpression("matched")), new CodeStatement[] {
                                                                new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(int)), "start", new CodeArrayIndexerExpression(new CodeVariableReferenceExpression("matched"), new CodeExpression[] {
                                                                                new CodePrimitiveExpression(0)})),
                                                                new CodeVariableDeclarationStatement(new CodeTypeReference(typeof(int)), "len", new CodeArrayIndexerExpression(new CodeVariableReferenceExpression("matched"), new CodeExpression[] {
                                                                                new CodePrimitiveExpression(1)})),
                                                                new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_value"), new CodeMethodInvokeExpression(new CodeMethodReferenceExpression(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "_capture"), "ToString"), new CodeExpression[] {
                                                                                new CodeVariableReferenceExpression("start"),
                                                                                new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression("len"), CodeBinaryOperatorType.Subtract, new CodeVariableReferenceExpression("start"))})),
                                                                new CodeMethodReturnStatement(new CodeVariableReferenceExpression("match"))}, new CodeStatement[0]),
                                                    new CodeMethodReturnStatement(new CodePrimitiveExpression(-1))}, new CodeTypeReference[0], null, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null)}, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                            Deslanged._TypeDeclaration("TokenizerFiber", false, false, false, true, false, (MemberAttributes.Final | MemberAttributes. Private), TypeAttributes.NotPublic, new CodeTypeParameter[0], new CodeTypeReference[0], new CodeTypeMember[] {
                                        Deslanged._MemberField(new CodeTypeReference(new CodeTypeReference(new CodeTypeReference(typeof(int)), 1), 1), "Program", null, (MemberAttributes.Final | MemberAttributes. Public), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                        Deslanged._MemberField(new CodeTypeReference(typeof(int)), "Index", null, (MemberAttributes.Final | MemberAttributes. Public), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                        Deslanged._MemberField(new CodeTypeReference(new CodeTypeReference(typeof(int)), 1), "Saved", null, (MemberAttributes.Final | MemberAttributes. Public), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                        Deslanged._Constructor((MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[] {
                                                    new CodeParameterDeclarationExpression(new CodeTypeReference(new CodeTypeReference(new CodeTypeReference(typeof(int)), 1), 1), "program"),
                                                    new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(int)), "index"),
                                                    new CodeParameterDeclarationExpression(new CodeTypeReference(new CodeTypeReference(typeof(int)), 1), "saved")}, new CodeExpression[0], new CodeExpression[0], new CodeStatement[] {
                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "Program"), new CodeArgumentReferenceExpression("program")),
                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "Index"), new CodeArgumentReferenceExpression("index")),
                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "Saved"), new CodeArgumentReferenceExpression("saved"))}, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                        Deslanged._Constructor((MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[] {
                                                    new CodeParameterDeclarationExpression(new CodeTypeReference("TokenizerFiber"), "fiber"),
                                                    new CodeParameterDeclarationExpression(new CodeTypeReference(typeof(int)), "index"),
                                                    new CodeParameterDeclarationExpression(new CodeTypeReference(new CodeTypeReference(typeof(int)), 1), "saved")}, new CodeExpression[0], new CodeExpression[0], new CodeStatement[] {
                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "Program"), new CodeFieldReferenceExpression(new CodeArgumentReferenceExpression("fiber"), "Program")),
                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "Index"), new CodeArgumentReferenceExpression("index")),
                                                    new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), "Saved"), new CodeArgumentReferenceExpression("saved"))}, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null)}, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null)}, new CodeCommentStatement[0])}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0]);
    public static System.CodeDom.CodeCompileUnit TokenizerTemplate = Deslanged._CompileUnit(new string[0], new CodeNamespace[] {
                Deslanged._Namespace("", new CodeNamespaceImport[] {
                            new CodeNamespaceImport("System.Collections.Generic")}, new CodeTypeDeclaration[0], new CodeCommentStatement[0]),
                Deslanged._Namespace("Lexly", new CodeNamespaceImport[0], new CodeTypeDeclaration[] {
                            Deslanged._TypeDeclaration("TokenizerTemplate", true, false, false, false, true, (MemberAttributes.Final | MemberAttributes. Private), TypeAttributes.NotPublic, new CodeTypeParameter[0], new CodeTypeReference[] {
                                        new CodeTypeReference("Tokenizer")}, new CodeTypeMember[] {
                                        Deslanged._MemberField(new CodeTypeReference(new CodeTypeReference(new CodeTypeReference(typeof(int)), 1), 1), "Program", null, (MemberAttributes.Static | MemberAttributes. FamilyAndAssembly), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                        Deslanged._MemberField(new CodeTypeReference(new CodeTypeReference(typeof(string)), 1), "BlockEnds", null, (MemberAttributes.Static | MemberAttributes. FamilyAndAssembly), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                        Deslanged._MemberField(new CodeTypeReference(new CodeTypeReference(typeof(int)), 1), "NodeFlags", null, (MemberAttributes.Static | MemberAttributes. FamilyAndAssembly), new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null),
                                        Deslanged._Constructor((MemberAttributes.Final | MemberAttributes. Public), new CodeParameterDeclarationExpression[] {
                                                    new CodeParameterDeclarationExpression(new CodeTypeReference("IEnumerable`1", new CodeTypeReference[] {
                                                                    new CodeTypeReference(typeof(char))}), "input")}, new CodeExpression[0], new CodeExpression[] {
                                                    new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Lexly.TokenizerTemplate")), "Program"),
                                                    new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Lexly.TokenizerTemplate")), "BlockEnds"),
                                                    new CodeFieldReferenceExpression(new CodeTypeReferenceExpression(new CodeTypeReference("Lexly.TokenizerTemplate")), "NodeFlags"),
                                                    new CodeArgumentReferenceExpression("input")}, new CodeStatement[0], new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null)}, new CodeCommentStatement[0], new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0], null)}, new CodeCommentStatement[0])}, new CodeAttributeDeclaration[0], new CodeDirective[0], new CodeDirective[0]);
}
